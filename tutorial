<!--
  Mainly following the tutorial from
    https://michaelwalczyk.com/blog-ray-marching.html

  Also the resources listed in the README.md
-->

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>WebGL Fractals</title>
    </head>
    <style>
        #glCanvas {
            border: 2px solid black;
        }
    </style>
    <canvas id="glCanvas" width="600" height="600"></canvas>
    <body></body>

    <script id="vertex-shader" type="glsl">#version 300 es
        in vec4 a_position;

        void main(){
            gl_Position = a_position;
        }
    </script>

    <script id="fragment-shader" type="glsl">#version 300 es
        precision highp float;
        out vec4 outColor;

        uniform float u_time;

        // SDF for a sphere
        float SDFsphere(vec3 p, float s){
            return length(p) - s;
        }

        // Our world, contains all the shapes
        float world(vec3 p){
            float sphere0 = SDFsphere(p, 0.8);
            float distort = sin(5.0 * p.x) * sin(5.0 * p.y) * sin(
            5.0 * p.z) * sin(u_time/500.0)/4.0;

            return sphere0 + distort;
        }

        // Calculate normals
        vec3 calcNormal(vec3 p){
            const vec3 epsilon = vec3(0.01, 0.0, 0.0);
            return normalize(
                vec3(
                    world(p + epsilon.xyy) - world(p - epsilon.xyy),
                    world(p + epsilon.yxy) - world(p - epsilon.yxy),
                    world(p + epsilon.yyx) - world(p - epsilon.yyx)
                )
            );
        }

        // Raymarching
        vec3 rayMarch(vec3 rayOrigin, vec3 rayDir){
            const float MAX_DIST = 100.0;
            const float MIN_DIST = 0.01;

            float d = 0.0;
            
            for(int i = 0; i < 100; i++){
                vec3 pos = rayOrigin + rayDir * d;
                float SDFdist = world(pos);

                d += SDFdist;

                if(SDFdist < MIN_DIST){
                    vec3 normal = calcNormal(pos);
                    vec3 light = vec3( 2.0, -5.0, 3.0);
                    vec3 dirToLight = normalize(pos - light);

                    float diffuseAmt = max(0.0, dot(normal, dirToLight));

                    return vec3(1.0, 0.0, 0.0) * diffuseAmt;
                }
                if(d > MAX_DIST){ break; }
            }

            return vec3(0.0, 0.0, 0.0);
        }

        void main(){
            vec3 camera = vec3(
                0.0 + 2.0*cos(u_time/500.0),
                0.0,
                -5.0 + 2.0*sin(u_time/500.0)
            );
            vec3 rayOrigin = camera;
            vec3 rayDir = vec3(gl_FragCoord.x/600.0 - 0.5, gl_FragCoord.y/600.0 - 0.5, 1.0);

            vec3 col = rayMarch(rayOrigin, rayDir);

            outColor = vec4(col, 1);
        }
    </script>

    <!-- Program -->
    <script>
        function createShader(gl, type, source){
            var shader = gl.createShader(type);
            gl.shaderSource(shader, source);
            gl.compileShader(shader);

            var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
            if(!success){
                console.log("createShader(): " + gl.getShaderInfoLog(shader));
                return undefined;
            }

            return shader;
        }

        function createProgram(gl, vertexShader, fragmentShader){
            var program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);

            var success = gl.getProgramParameter(program, gl.LINK_STATUS);
            if(!success){
                console.log("createProgram(): " + gl.getProgramInfoLog(program));
                return undefined;
            }

            return program;
        }

        // Canvas
        var canvas = document.querySelector("#glCanvas");
        var gl = canvas.getContext("webgl2");
        if(!gl){
            console.log("No WebGL");
        } else {
            // Create shaders
            var vertexShaderSource = document.querySelector("#vertex-shader").text;
            var fragmentShaderSource = document.querySelector("#fragment-shader").text;

            var vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
            var fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);

            // Link shaders
            var program = createProgram(gl, vertexShader, fragmentShader);

            var positionAttribLocation = gl.getAttribLocation(program, "a_position");
            var positionBuffer = gl.createBuffer();

            gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);

            var positions = [
                -1, -1,  1, -1,  1,  1,
                -1, -1,  1,  1, -1,  1
            ];
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);

            var vao = gl.createVertexArray();
            gl.bindVertexArray(vao);
            gl.enableVertexAttribArray(positionAttribLocation);
            gl.vertexAttribPointer(positionAttribLocation, 2, gl.FLOAT, false, 0, 0);

            // Canvas
            gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

            gl.useProgram(program);
            gl.bindVertexArray(vao);
        }

        var timeLoc = gl.getUniformLocation(program, "u_time");
        function render(t){
            gl.clearColor(0, 0, 0, 0);
            gl.clear(gl.COLOR_BUFFER_BIT);
            gl.drawArrays(gl.TRIANGLES, 0, 6);

            gl.uniform1f(timeLoc, t);

            window.requestAnimationFrame(render);
        }
        window.requestAnimationFrame(render);
    </script>
</html>
